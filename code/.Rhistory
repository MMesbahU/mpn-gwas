p2
cowplot::ggsave2(final_plot, file="../output/telomere_length/TERT_correlation.pdf",
height=2.5,width=5)
cowplot::ggsave2(final_plot, file="../output/telomere_length/TERT_correlation.pdf",
height=2.5,width=5)
cor.test(toplot$z_telo,toplot$z_mpn,method = "pearson")
p2 <- ggplot(toplot,aes(x=z_telo,y=z_mpn)) +
geom_point(aes(color=sig)) +
geom_smooth(method='lm',color="black",se=FALSE,linetype="dashed") +
scale_color_manual(values=jdb_palette("flame_light")[c(2,7)]) +
scale_y_continuous(expand = c(0.01, 0))+
scale_x_continuous(expand = c(0.01, 0))+
labs(x="Telomere Length z-score",y = "MPN z-score") +
pretty_plot(fontsize=8) + L_border() +
theme(plot.title = element_text(hjust = 0.5),legend.position="none")
cowplot::ggsave2(p2, file="../output/telomere_length/TERT_zscores.pdf",
height=2,width=2)
library(tidyverse)
library(data.table)
library(BuenColors)
library(cowplot)
library(TwoSampleMR)
library(MendelianRandomization)
# Exposure data (pval < 1e-5)
telo_sumstats <- as.data.frame(fread("zcat < /Volumes/broad_sankaranlab/telomere_length_GWAS/telomere_length_forMR.txt.gz"))
telo_dat <- format_data(telo_sumstats,type="exposure")
# Outcome data
outcome_dat <- read_outcome_data(
snps = telo_dat$SNP,
filename = "/Volumes/broad_sankaranlab/MPN_GWAS/metaGWAS/Hinds_UKBB_finngen_metal_sumstats_risk_oriented.txt.gz",
sep = "\t",
snp_col = "RSID",
beta_col = "Effect",
se_col = "StdErr",
effect_allele_col = "risk",
other_allele_col = "nonrisk",
eaf_col = "RAF",
pval_col = "pvalue"
) %>% mutate(outcome = "MPN",samplesize.outcome=758103)
# Harmonize data
dat <- harmonise_data(
exposure_dat = telo_dat,
outcome_dat = outcome_dat
)
# LD clump
dat_clumped <- clump_data(dat,clump_r2=0.001)
# Perform MR
mr_method_list()
methods_to_use <- c("mr_egger_regression","mr_ivw","mr_weighted_median")
res <- mr(dat_clumped, method_list=methods_to_use)
res
mr_presso(data = dat_clumped,
BetaOutcome = "beta.outcome", BetaExposure = "beta.exposure",
SdOutcome = "se.outcome", SdExposure = "se.exposure",
OUTLIERtest = TRUE, DISTORTIONtest = TRUE,
NbDistribution = 1000,  SignifThreshold = 0.05)
# Plots
p1 <- mr_scatter_plot(res, dat_clumped)
p1 <- p1[[1]] + pretty_plot(fontsize=7) + L_border() + theme(legend.position ="top") +
geom_hline(yintercept=0,linetype="dashed")
p1
res_single <- mr_singlesnp(dat_clumped,single_method="mr_meta_fixed",
all_method=methods_to_use)
p2 <- mr_forest_plot(res_single)
p2 <- p2[[1]]+ pretty_plot(fontsize=7) + L_border() + theme(legend.position = "none")
res_loo <- mr_leaveoneout(dat_clumped,method = TwoSampleMR::mr_ivw)
p3 <- mr_leaveoneout_plot(res_loo)
p3 <- p3[[1]]+ pretty_plot(fontsize=7) + L_border() + theme(legend.position = "none")
res_single <- mr_singlesnp(dat_clumped)
p4 <- mr_funnel_plot(res_single)
p4[[1]]
p4[[1]]
p3
p1
cowplot::ggsave2(p1, file="../output/telomere_length/mendelian_randomization/MR_scatterplot.pdf",
width=2.5, height=2.5)
cowplot::ggsave2(p2, file="../output/telomere_length/mendelian_randomization/MR_singleSNP.pdf",
width=2.5, height=3)
cowplot::ggsave2(p3, file="../output/telomere_length/mendelian_randomization/MR_leave_one_out.pdf",
width=2.5, height=3)
library(data.table)
library(tidyverse)
library(qvalue)
library(Matrix)
library(ComplexHeatmap)
library(SummarizedExperiment)
library(BuenColors)
library(annotables)
library(ggrastr)
library(ggrepel)
"%ni%" <- Negate("%in%")
# Add leading 0 to chromosomes under 10
CS.df <- fread("../data/abf_finemap/MPN_CML_abf_cojo_PP0.001_annotated.bed") %>%
mutate(chr = as.integer(gsub("chr","",seqnames))) %>% mutate(var = ifelse(chr < 10,paste0("0",var),var)) %>%
dplyr::select(var) %>% unique()
fwrite(CS.df,file="../output/phewas/MPN_PP001_phewas_input_leading_zeros.txt",sep="\t",col.names = F)
# SAIGE pheWAS ------------------------------------------------------------
# Read phewas results
icd <- fread("zcat < ../output/phewas/SAIGE.allphenos.MPN.txt.gz") %>%
mutate(var = paste(CHROM,POS,REF,ALT,sep=":"), maf = ifelse(af < 0.5, af, 1-af),
expected_case_minor_AC =  2 * maf * num_cases, logp = -log10(pval),
var = paste0(CHROM,":",POS,"_",REF,"_",ALT)) %>%
filter(expected_case_minor_AC > 50)
# Read and merge pheno codes
phecodes <- readxl::read_xlsx("../output/phewas/saige-phenotype-information.xlsx") %>%
dplyr::rename(pheno = `Phenotype Description`,category=`Phenotype Category`) %>%
filter(category %ni% c("pregnancy complications","injuries & poisonings","sense organs","symptoms"))
# Read and merge pheno codes
phecodes <- readxl::read_xlsx("../output/phewas/saige-phenotype-information.xlsx") %>%
dplyr::rename(pheno = `Phenotype Description`,category=`Phenotype Category`) %>%
filter(category %ni% c("pregnancy complications","injuries & poisonings","sense organs","symptoms"))
phecodes$PheCode <- as.double(phecodes$PheCode)
icd <- merge(icd,phecodes[,c("PheCode","pheno","category")],by.x="phecode",by.y="PheCode")
# Combine with sum stats
CS.df <- fread("../data/abf_finemap/MPN_CML_abf_cojo_95CS.bed")
merged <- merge(icd,CS.df[,c("var","PP","region_rank")],by="var") %>%
mutate(CHROM=paste0("chr",CHROM))
# Remove MPNs and polycythemia vera due to redundancy
merged <- merged %>% filter(pheno %ni% c("Myeloproliferative disease","Polycythemia vera","Polycythemia, secondary"))
# Exclude HLA region
hla_bounds <- c(28866528,33775446)
toexclude <- merged %>% filter(CHROM=="chr6", POS > hla_bounds[1],POS < hla_bounds[2]) %>% .$var
merged <- merged %>% filter(var %ni% toexclude)
# Add nearest gene
# Read in gene body annotations
gencode_gr <- readRDS("../data/annotations/gencode_filtered.rds")
# Find nearest gene
merged.gr <- makeGRangesFromDataFrame(merged,keep.extra.columns = T,seqnames.field="CHROM",
start.field = "POS",end.field = "POS")
merged$nearest_gene <- gencode_gr[nearest(merged.gr,gencode_gr,ignore.strand=TRUE),]$gene_name
# Set bonferroni threshold
highPP <- merged %>% filter(PP > 0.10| region_rank ==1 )
num_variants <- highPP %>% .$var %>% unique %>% length()
p_threshold <- 0.05 / (length(unique(merged$pheno)))
tolabel <- highPP %>% group_by(category) %>%
dplyr::slice(which.max(logp)) %>%
mutate(tolabel=ifelse(logp > -log10(p_threshold),paste(pheno,nearest_gene,sep="-"),"")) %>%
arrange(category,desc(logp)) %>% as.data.frame() %>% dplyr::select(var,tolabel,pheno)
toplot<- right_join(tolabel,highPP,by=c("var","pheno")) %>%
mutate(tolabel = ifelse(is.na(tolabel),"",tolabel)) %>%
group_by(pheno) %>%mutate(mx = max(logp)) %>%
arrange(category,desc(mx),desc(logp)) %>% ungroup() %>%   mutate(order = row_number())
toplot$pheno <- factor(toplot$pheno, levels=unique(toplot$pheno))
toplot$FDR <- qvalue::qvalue(toplot$pval)$qvalues
p1 <- ggplot(toplot,aes(x=pheno,y=-log10(FDR),label=tolabel))+
geom_point_rast(aes(color=category,fill=category),alpha=1,size=0.5) +
scale_color_manual(values=jdb_palette("lawhoops"))+
geom_hline(yintercept = -log10(0.01), linetype = 2) +
labs(y="pheWAS -log10(FDR)",x="Phenotype") +
geom_text_repel(angle = 0,size=2) +
pretty_plot(fontsize=8) + L_border() +
theme(axis.text.x = element_blank(), axis.ticks.x=element_blank(),
strip.background = element_blank(), strip.text = element_blank(),
legend.position ="bottom") +
scale_y_continuous(expand = c(0.05, 0))
p1
cowplot::ggsave2(p1,file="../output/phewas/phewas_dotplot_categories.pdf",width=4,height=3)
# Write table
phewas_table <- merged %>%filter(pval < p_threshold) %>% filter(PP > 0.10| region_rank ==1 )%>%
dplyr::select(var,ID,pheno,num_cases,maf,beta,sebeta,pval,PP,region_rank,nearest_gene) %>%
arrange(pval)
fwrite(phewas_table,file="../output/phewas/phewas_sig_phenos.tsv",sep = "\t")
library(data.table)
library(tidyverse)
library(BuenColors)
replication <- fread("../output/replication_joint_statistics/MVP_replication_mvp_JAK2_only.tsv")
# Assume overall familial RR to first-degree relatives of cases
overall_RR = 4.93
# Formula taken from Michailidou et al., 2017 Nature
get_heritability <- function(sentinels){
variant_rr <- sapply(seq(1,nrow(sentinels)),function(i){
p <- sentinels[i,]$maf
beta <- sentinels[i,]$effect
se <- sentinels[i,]$stderr
lambda <- overall_RR
rr <- p *(1-p)*(beta^2-se^2)/log(lambda)
return(rr)
# ((1/log(overall_RR))*(1/rr)*(2*p*q*(r-1)/(p*r+q)^3))^2
})
return(sum(variant_rr))
}
get_heritability(replication)
get_heritability(replication %>% filter(meta_pval < 5e-8))
library(tidyverse)
library(data.table)
library(pROC)
library(plotROC)
library(rms)
library(scales)
library(BuenColors)
# Read in other covariates: age, sex, genotyping array, top PCs
other_covariates <- fread("zcat < /Volumes/broad_sankaranlab/ebao/SAIGE/input/mpn_uk31063_mpn_cml_phenofile.txt.gz")
other_covariates$IID <- as.character(other_covariates$IID)
# Read in PRS scores
# Read in PRS scores
prune_and_thresh <- T
toplot <- T
thresholds <- c("1","5e-3","1e-3","5e-4","1e-4","5e-5","1e-5","1e-6","5e-8")
# Get AUROC for all p thresholds
all_scores <- lapply(thresholds,function(scalar){
print(scalar)
scores <- fread(cmd=paste0("zcat < /Volumes/broad_sankaranlab/ebao/PRS/pruned_thresholded/p",scalar,"/PRS_clumped.",scalar,".ALL.sscore.gz"))
scored_vars <- fread(paste0("/Volumes/broad_sankaranlab/ebao/PRS/pruned_thresholded/p",scalar,"/PRS_clumped.",scalar,".ALL.scored.vars"),header=FALSE)
clumped_vars <- fread(paste0("/Volumes/broad_sankaranlab/ebao/PRS/pruned_thresholded/p",scalar,"/PRS_clumped.",scalar,".ALL.clumped"),header=FALSE)
ids <- scores$`#IID`
scores <- scores[,-1] %>% data.matrix() %>% rowSums()
scores.df <- data.frame(IID = ids, PRS= scores,p_thresh=scalar)
scores.df$IID <- as.character(scores.df$IID)
# Add PRS scores to the other covariates
all_covariates <- merge(other_covariates, scores.df,by="IID") %>% dplyr::rename(pheno="y")
pheno <- all_covariates$pheno
covars_to_use <- all_covariates %>% dplyr::select(age,sex,genotyping.array,paste0("PC",seq(1,10)),PRS)
# Perform logistic regression
prs_model <- glm(pheno ~ ., data=covars_to_use,family="binomial")
predpr <- predict(prs_model,type=c("response"))
# ROC
results <- roc(pheno,predpr)
output <- data.frame(p_thresh = scalar,
num_variants = paste(nrow(scored_vars),"/",nrow(clumped_vars)),
auroc = as.numeric(results$auc))
return(output)
}) %>% bind_rows()
all_scores
write.table(all_scores,file="../output/PRS/PRS_AUROC_varying_p_thresholds.tsv",
quote = FALSE, sep = "\t", col.names = TRUE, row.names = F)
library(tidyverse)
library(data.table)
library(pROC)
library(plotROC)
library(rms)
library(scales)
library(BuenColors)
# Read in other covariates: age, sex, genotyping array, top PCs
other_covariates <- fread("zcat < /Volumes/broad_sankaranlab/ebao/SAIGE/input/mpn_uk31063_mpn_cml_phenofile.txt.gz")
other_covariates$IID <- as.character(other_covariates$IID)
# Read in PRS scores
prune_and_thresh <- T
toplot <- T
if (prune_and_thresh){
scalar <- "1e-5"
scores <- fread(cmd=paste0("zcat < /Volumes/broad_sankaranlab/ebao/PRS/pruned_thresholded/p",scalar,"/PRS_clumped.",scalar,".ALL.sscore.gz"))
}
ids <- scores$`#IID`
scores <- scores[,-1] %>% data.matrix() %>% rowSums()
scores.df <- data.frame(IID = ids, PRS= scores)
scores.df$IID <- as.character(scores.df$IID)
# Add PRS scores to the other covariates
all_covariates <- merge(other_covariates, scores.df,by="IID") %>% dplyr::rename(pheno="y")
# Restrict by a certain age
if (FALSE){
all_covariates <- all_covariates %>% filter(age > 60)
}
# Calculate percentiles
all_covariates$percentile_PRS <- cut(all_covariates$PRS, quantile(all_covariates$PRS, prob = 0:100 / 100, names = T),
include.lowest=TRUE,labels=seq(1,100)) %>% as.integer()
all_covariates$decile_PRS <- cut(all_covariates$PRS, quantile(all_covariates$PRS, prob = 0:10 / 10, names = T),
include.lowest=TRUE,labels=seq(1,10)) %>% as.integer()
pheno <- all_covariates$pheno
covars_to_use <- all_covariates %>% dplyr::select(age,sex,genotyping.array,paste0("PC",seq(1,10)),PRS)
# Perform logistic regression
prs_model <- glm(pheno ~ ., data=covars_to_use,family="binomial")
predpr <- predict(prs_model,type=c("response"))
# ROC
roc(pheno,predpr)
# plot(roc(pheno,predpr))
# Calculate Nagelkerke's pseudo-R2 to estimate explained variance
R2_difference <- function(variable,pheno,covars){
diff <- lrm(pheno ~ .,data=covars)$stats["R2"] - lrm(pheno ~ .,data=covars %>% dplyr::select(-variable))$stats["R2"]
df <- data.frame(variable = paste(variable,collapse="/"),incremental_r2 = diff)
return(df)
}
lrm(pheno ~ .,data=covars_to_use)$stats["R2"]
lrm(pheno ~ .,data=covars_to_use %>% dplyr::select(-PRS))$stats["R2"]
variables <- list("PRS","sex","age",c("age","sex"))
incremental_r2 <- lapply(variables,function(y) R2_difference(variable = y, pheno =pheno,covars=covars_to_use)) %>% bind_rows()
incremental_r2$variable <- factor(incremental_r2$variable, levels=unique(incremental_r2$variable))
p1 <- ggplot(incremental_r2,aes(x=variable,y=100*incremental_r2)) +
geom_bar(position=position_dodge(), stat="identity", fill = "firebrick", color = "black")  +
labs(x="",y="Incremental pseudo-R2 (%)")+
pretty_plot(fontsize = 8) + L_border()+
scale_y_continuous(expand = c(0, 0)) +
theme(legend.position = "none")
p1
# Calculate ORs for different deciles of PRS
# Compare individuals from decile X to those from baseline decile
decile_regression <- function(decile,baseline=1){
#stopifnot(decile != 1)
print(decile)
subset <- all_covariates %>% filter(decile_PRS %in% c(baseline,decile)) %>% mutate(decile_PRS = ifelse(decile_PRS == baseline, "baseline","risk"))
covars_to_use <- subset %>% dplyr::select(age,sex,genotyping.array,paste0("PC",seq(1,10)),decile_PRS)
pheno <- subset$pheno
prevalence <- 100*nrow(subset[subset$pheno == 1,]) / nrow(subset)
if (decile ==baseline){
d <- data.frame(decile=decile,prevalence = prevalence,OR=1,bottom95CI=1,top95CI=1)
} else{
results <- glm(pheno ~ ., data=covars_to_use,family="binomial") %>% summary()
beta <- results$coefficients[nrow(results$coefficients),"Estimate"]
error <- results$coefficients[nrow(results$coefficients),"Std. Error"]
OR <- exp(beta)
top95ci <- exp(beta + 1.96*error)
bottom95ci <- exp(beta - 1.96*error)
d <- data.frame(decile=decile,
prevalence = prevalence,
OR=round(OR,3),
bottom95CI=round(bottom95ci,3),
top95CI=round(top95ci,3))
}
return(d)
}
decile_ORs <- lapply(seq(1,10),function(y) decile_regression(y,baseline=1)) %>% bind_rows
decile_ORs
p2 <- ggplot(decile_ORs,aes(x=decile,y=OR)) +
geom_point() + geom_line() +
geom_errorbar(aes(ymin = bottom95CI, ymax = top95CI), colour="black", width=.1) +
geom_hline(yintercept = 1, linetype = 2) +
labs(x="Decile of PRS (1 = lowest (reference))",y="Odds Ratio") +
scale_x_continuous(breaks=seq(1,10)) +
scale_y_continuous(breaks=seq(1,6)) +
theme(legend.position="none") +
pretty_plot(fontsize = 8) + L_border()
p2
p3 <- ggplot(decile_ORs,aes(x=decile,y=prevalence)) +
geom_point() + geom_line() +
labs(x="Decile of PRS (1 = lowest (reference))",y="Prevalence of MPN (%)") +
scale_x_continuous(breaks=seq(1,10)) +
theme(legend.position="none") +
pretty_plot(fontsize = 8) + L_border()
p2
cowplot::ggsave2(p1,file=paste0("../output/PRS/PRS.pruned.",scalar,"_incremental_r2_comparison.pdf"),width=2,height=2)
cowplot::ggsave2(p2, file=paste0("../output/PRS/PRS.pruned.",scalar,"_decile_ORs.pdf"),width = 2, height=2)
cowplot::ggsave2(p3, file=paste0("../output/PRS/PRS.pruned.",scalar,"_decile_prevalence.pdf"),width = 2, height=2)
write.table(all_covariates[,-1],file=paste0("../output/PRS/PRS_scores_covariates_PT_",scalar,".txt"),quote = FALSE, sep = "\t", col.names = TRUE, row.names = F)
head(all_covariates)
head(other_covariates)
head(all_covariates[,-1])
# Assess co-localization of MPN and HSC signature -------------------------
library(BuenColors)
library(ggrastr)
library(ggridges)
merged <- fread("zcat < /Volumes/broad_sankaranlab/ebao/HCA/scSVA/examples/ICA_BM_Seurat/mpn_hsc_signatures.tsv.gz")
cor.test(merged$hsc_signature,merged$mpn_signature,method="spearman")
require(Matrix)
require(Seurat)
require(rhdf5)
require(data.table)
require(future.apply)
library(tidyverse)
library(Rmagic)
# Analyze MAGIC results ---------------------------------------------------
data <- t(fread("zcat < /Volumes/broad_sankaranlab/ebao/HCA/scSVA/examples/ICA_BM_Seurat/ICA_BM_imputed_mpn_hsc_genes.tsv.gz"))
library(ggplot2)
library(scales)
library(tidyverse)
library(cowplot)
library(data.table)
library(BuenColors)
library(ggrepel)
# Read in MACS peaks file to browse histone peaks (not needed for figure generation)
peaks <- fread("../data/histone_modifications/HSPC_H3K27Ac_peaks.narrowPeak")
colnames(peaks) <- c("chr","start","end","id","int_score",".","FC","log10p","log10q","summit_position_to_start")
# Read in ROSE
ROSE <- readxl::read_xlsx("../data/histone_modifications/rose_o/HSPC_H3K27Ac_peaks_AllEnhancers_table_gfi1b.xlsx")  %>%
dplyr::rename(signal = "HSPC_H3K27Ac.no_duplicates.bam")
super.threshold <- 9730.1403 # extracted from ROSE output txt file
callout <- "GFI1B (241)"
ROSE$callout[241] <- callout
p1 <- ggplot(ROSE, aes(x=enhancerRank, y=signal)) +
geom_hline(yintercept = super.threshold,colour="grey", linetype = "longdash") +
geom_point(data=ROSE,color = "#5E4FA2",size=0.6)  + # find pretty color: jdb_palette("brewer_spectra")[c(1,8)]
geom_point(data=ROSE[which(ROSE$callout == callout),],aes(x=enhancerRank, y=signal),color='#DC494C',size=1) +
labs(x = "Enhancer Ranking") +labs(y = "H3K27ac Signal") +
pretty_plot(fontsize = 8) + L_border() +
geom_text_repel(data=ROSE,label=ROSE$callout,color = '#DC494C',hjust=1.5,vjust=0.5,aes(fontface=3))+
theme(aspect.ratio=1) +
scale_x_reverse() + scale_y_continuous(labels = comma)
p1
cowplot::ggsave2(p1,file="../output/rose/rose_rank_order.pdf",height=3,width=3)
cowplot::ggsave2(p1,file="../output/rose/rose_rank_order.pdf",height=3,width=3)
library(data.table)
library(tidyverse)
library(BuenColors)
library(plotly)
# Read in full sumstats
sumstats <- fread("zcat < /Volumes/broad_sankaranlab/MPN_GWAS/metaGWAS/Hinds_UKBB_finngen_metal_sumstats_risk_oriented.txt.gz")
# Read in LD to sentinel information for lead variant
ld_to_lead <- fread("../data/gfi1b_locus/ukb_region.rs621940.marked.ld") %>%
mutate(nonsentinel_RSID = ifelse(RSID1=="rs621940",RSID2,RSID1)) %>%
dplyr::select(nonsentinel_RSID,R2) %>% add_row(., nonsentinel_RSID = "rs621940",R2=1)
# GFI1B
chr <- 9
center <- 135870130
width <- 50000
range <- c(135848632,135889482) # the range for Figure 3E
# range <- c(135849949,135884754) # the range for Figure S11
lead_variant_pos <- c(135870130)
subset <- sumstats %>% filter(CHR == chr, POS > range[1], POS < range[2])
subset <- merge(subset,ld_to_lead,by.x = "RSID",by.y="nonsentinel_RSID")
subset %>% arrange(pvalue) %>% head()
p1 <- ggplot(subset,aes(x=POS,y=-log10(pvalue),label=MarkerName, label=RSID)) +
geom_point(aes(fill=R2),shape=21,size=1)+
scale_fill_gradientn(colors = jdb_palette("solar_extra")[-c(1,2)],name="R2") +
guides(fill=guide_colorbar(title.vjust=0.75))+
labs(x="",y="-log10(p)")+
geom_hline(yintercept = -log10(5e-8),linetype="dashed")+
geom_vline(xintercept = lead_variant_pos[1], color="red")+
pretty_plot(fontsize=6) + L_border() +
scale_y_continuous(expand=c(0,0)) +
scale_x_continuous(expand=c(0,0)) +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.position = c(.05, .9),
legend.justification = c("left", "top"),
legend.box.just = "left",
legend.margin = margin(1, 1, 1, 1),
legend.direction = "horizontal",
legend.title = element_text(face="bold"))
p1
cowplot::ggsave2(p1, file="../output/locus_plots/gfi1b_locus.pdf",height = 0.5,width=2)
library(data.table)
library(tidyverse)
library(BuenColors)
library(cowplot)
#GEMM" stands for granulocyte, erythrocyte, monocyte, megakaryocyte
cfu_color_maps <- ejc_color_maps[c("Ery","GMP-C","Mono","GMP-A","CMP")]
names(cfu_color_maps) <- c("BFU-E","CFU-G","CFU-M","CFU-GM","CFU-GEMM")
# Read in CFU results
cfu2 <- readxl::read_xlsx("../../data/experimental_data/CFU_assays/Exp2_Day14_primary_CFU-C.xlsx") %>%
filter(Sample != "Mock") %>% mutate(Replicate = paste0("exp2_",Replicate))
cfu3 <- readxl::read_xlsx("../../data/experimental_data/CFU_assays/Exp3_CFU-C.xlsx") %>%
filter(Sample != "Mock") %>% mutate(Replicate = paste0("exp3_",Replicate))
# Combine data from different experiments
# cfu <- cfu3
cfu <- bind_rows(cfu2,cfu3)
melted <- cfu %>% pivot_longer(-c(Sample,Plating,Replicate),names_to="type",values_to="count")
combined <- melted %>% group_by(Sample,Plating,type) %>% summarise(mean=mean(count),se=sd(count)/sqrt(n()))
combined$Sample <- factor(combined$Sample,levels=c("NT","CDS_g1","CDS_g2"))
combined$type <- factor(combined$type,levels=rev(unique(combined$type)))
errors <- combined %>% group_by(Sample,Plating) %>% mutate(pos = cumsum(mean),  upper = pos + se,  lower = pos - se)
totals <- melted %>% group_by(Sample,Plating,Replicate) %>% summarise(total = sum(count))
p1 <- ggplot(combined,aes(x=Sample,y=mean)) +
geom_bar(aes(fill = type),color="black", stat="identity") +
geom_errorbar(data=errors,aes(ymax=upper,  ymin=lower), width=0.15) +
geom_jitter(data=totals,aes(x=Sample,y=total),color="black",position = position_jitter(width = .2),size=0.8) +
scale_fill_manual(values = jdb_palette("brewer_spectra")[c(1,3,5,7,9)]) +
pretty_plot(fontsize = 8) + L_border() +
labs(x="",y="No. of colonies") +
facet_wrap(~Plating) +
theme(legend.title=element_blank(),axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(expand=c(0,0))
p1
library(data.table)
library(tidyverse)
library(BuenColors)
library(cowplot)
#GEMM" stands for granulocyte, erythrocyte, monocyte, megakaryocyte
cfu_color_maps <- ejc_color_maps[c("Ery","GMP-C","Mono","GMP-A","CMP")]
names(cfu_color_maps) <- c("BFU-E","CFU-G","CFU-M","CFU-GM","CFU-GEMM")
# Read in CFU results
cfu2 <- readxl::read_xlsx("../../data/experimental_data/CFU_assays/Exp2_Day14_primary_CFU-C.xlsx") %>%
filter(Sample != "Mock") %>% mutate(Replicate = paste0("exp2_",Replicate))
library(data.table)
library(tidyverse)
library(BuenColors)
library(cowplot)
# Read in discovery sumstats
CS.df <- fread("../data/abf_finemap/MPN_CML_abf_cojo_PP0.001_annotated.bed") %>% filter(sentinel=="yes")
# Read in replication statistics and reorient and save
name <- "mpnRepLoci.hasJAK2"
replication <- fread(paste0("../data/MVP_replication/",name,".glm.logistic.txt"))
replication <- replication %>% drop_na() %>%
dplyr::rename(CHR = "#CHROM") %>%
mutate(UKID = paste0(CHR,":",POS,"_",REF,"_",ALT),UKID_2 = paste0(CHR,":",POS,"_",ALT,"_",REF)) %>%
mutate(beta = log(OR), se = abs(log(OR)/T_STAT))
# Orient UKID in the same way
replication <- replication %>%
mutate(UKID_true = ifelse(UKID %in% CS.df$var,UKID,UKID_2),
beta_true = ifelse(UKID %in% CS.df$var,beta,-1*beta),
ALT_true = ifelse(UKID %in% CS.df$var,ALT,REF),
REF_true = ifelse(UKID %in% CS.df$var,REF,ALT)) %>%
dplyr::select(-c(UKID,UKID_2,beta,REF,ALT)) %>%
dplyr::rename(UKID = "UKID_true",beta= "beta_true",REF = "REF_true",ALT="ALT_true") %>%
mutate(OR = exp(beta))
fwrite(replication,file=paste0("../data/MVP_replication/",name,".glm.logistic.oriented.txt"),sep="\t")
replication <- fread(paste0("../data/MVP_replication/",name,".glm.logistic.oriented.txt"))
merged <- merge(CS.df,replication,by.x="var",by.y="UKID")
# Binomial test for directional concordance
merged <- merged %>% mutate(direction = ifelse((effect > 1 & beta >1 )| (effect < 1 & beta <1),1,-1))
merged %>% dplyr::select(effect,beta,direction)
directions <- as.numeric(table(merged$direction))
binom.test(directions[2], nrow(merged), p = 0.5, alternative = "greater", conf.level = 0.95)
# How many significant at 5% level
nominal <- merged %>% filter(P < 0.05)
binom.test(nrow(nominal), nrow(merged), p = 0.05, alternative = "greater", conf.level = 0.95)
# Plot effect size correlation
summary(lm(effect~beta,merged))
ggplot(merged,aes(x=beta,y=effect))+
geom_point()+
pretty_plot(fontsize = 8) + L_border()
# Inverse variance weighted meta-analysis
ivw_meta <- function(betas,ses){
weights <- 1/(ses^2)
meta_se <- sqrt(1/(sum(weights)))
meta_beta <- sum(betas*weights) / sum(weights)
meta_z <- meta_beta / meta_se
meta_pval <- 2*pnorm(-abs(meta_z))
return(meta_pval)
}
merged$meta_pval <- sapply(merged$var,function(UKID){
subset <- merged %>% filter(var == UKID)
ivw_meta(betas = c(subset$effect,subset$beta),ses = c(subset$stderr,subset$se))
})
merged %>% dplyr::select(var,pvalue,P,meta_pval) %>% arrange(meta_pval)
